org: salvadordonayre
service: abarrotes-compras

plugins:
  - serverless-python-requirements
  - serverless-aws-documentation

provider:
  name: aws
  runtime: python3.9
  timeout: 30
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  iam:
    role: arn:aws:iam::250853414258:role/LabRole
  environment:
    stage: ${self:provider.stage}
    TABLE_NAME: ${self:provider.stage}-t-carrito

custom:
  pythonRequirements:
    dockerizePip: true
    layer: false
    useDownloadCache: false
    useStaticCache: false
  documentation:
    api:
      info:
        version: '1.0.0'
        title: Abarrotes Compras API
        description: API para gestionar el carrito de compras y el historial de compras
    models:
      - name: CartItem
        contentType: 'application/json'
        schema:
          type: object
          required:
            - tenant_id
            - user_id
            - producto_id
            - cantidad
          properties:
            tenant_id:
              type: string
              description: "ID del tenant (nombre del establecimiento)"
            user_id:
              type: string
              description: "ID del usuario que agrega el producto"
            producto_id:
              type: string
              description: "ID único del producto"
            cantidad:
              type: integer
              description: "Cantidad del producto a agregar al carrito"
            
      - name: UpdateCartItem
        contentType: 'application/json'
        schema:
          type: object
          required:
            - tenant_id
            - user_id
            - producto_id
            - cantidad
          properties:
            tenant_id:
              type: string
              description: "ID del tenant (nombre del establecimiento)"
            user_id:
              type: string
              description: "ID del usuario que actualiza el carrito"
            producto_id:
              type: string
              description: "ID del producto a actualizar"
            cantidad:
              type: integer
              description: "Nueva cantidad para el producto (puede ser 0 para eliminar)"

      - name: DeleteCartItem
        contentType: 'application/json'
        schema:
          type: object
          properties:
            tenant_id:
              type: string
            user_id:
              type: string

      - name: CompletePurchaseRequest
        contentType: 'application/json'
        schema:
          type: object
          required:
            - tenant_id
            - user_id
          properties:
            tenant_id:
              type: string
              description: "ID del tenant (nombre del establecimiento)"
            user_id:
              type: string
              description: "ID del usuario que completa la compra"
            


functions:
  anadir:
    handler: AddProduct.lambda_handler
    documentation:
      summary: Añadir producto al carrito
      requestModels:
        'application/json': CartItem
    events:
      - http:
          path: /cart/add
          method: post
          cors: true
          integration: lambda-proxy
      - http:
          path: /cart/add
          method: options
          cors: true
          integration: lambda-proxy
  actualizar:
    handler: UpdateProduct.lambda_handler
    documentation:
      summary: Actualizar producto en el carrito
      requestModels:
        'application/json': UpdateCartItem
    events:
      - http:
          path: /cart/update
          method: put
          cors: true
          integration: lambda-proxy
      - http:
          path: /cart/update
          method: options
          cors: true
          integration: lambda-proxy 
  eliminar:
    handler: DeleteProduct.lambda_handler
    documentation:
      summary: Eliminar producto del carrito
      requestModels:
        'application/json': DeleteCartItem
    events:
      - http:
          path: /cart/delete
          method: delete
          cors: true
          integration: lambda-proxy 
      - http:
          path: /cart/delete
          method: options
          cors: true
          integration: lambda-proxy
  listar:
    handler: GetCart.lambda_handler
    documentation:
      summary: Listar productos del carrito
      description: Lista todos los productos en el carrito del usuario
    events:
      - http:
          path: /cart
          method: get
          cors: true
          integration: lambda-proxy
      - http:
          path: /cart
          method: options
          cors: true
          integration: lambda-proxy

  confirm:
    handler: CompletePurchase.lambda_handler
    documentation:
      summary: Completar compra
      description: Completa la compra del carrito y guarda el historial
      requestModels:
        'application/json': CompletePurchaseRequest
    events:
      - http:
          path: /cart/complete
          method: post
          cors: true
          integration: lambda-proxy
      - http:
          path: /cart/complete
          method: options
          cors: true
          integration: lambda-proxy
  historial:
    handler: GetHistory.lambda_handler
    documentation:
      summary: Obtener historial de compras
      description: Obtiene el historial de compras del usuario
    events:
      - http:
          path: /history
          method: get
          cors: true
          integration: lambda-proxy
      - http:
          path: /history
          method: options
          cors: true
          integration: lambda-proxy
  swaggerui:
    handler: swagger.lambda_handler
    events:
      - http:
          path: /docs
          method: get
          cors: true
  openapi:
    handler: swagger.openapi_handler
    events:
      - http:
          path: /openapi.yaml
          method: get
          cors: true

resources:
  Resources:
    CartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    HistoryCartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}-history
        AttributeDefinitions:
          - AttributeName: tenant_id # Tenantid + user_id
            AttributeType: S
          - AttributeName: cart_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id  # Tenantid + user_id
            KeyType: HASH
          - AttributeName: cart_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
   
  
  



